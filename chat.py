# -*- coding: utf-8 -*-
"""Untitled22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DxQxQOEy5suga6AB-UrkmsLLxP8Ziwkn
"""

from enum import Enum

class Useroptions(Enum):
    create = 0
    login = 1
    quit = 2

class Loginoptions(Enum):
    sendmsg = 0
    inbox = 1
    sentbox = 2
    viewStatus = 3
    changeStatus = 4
    changePassword = 5
    logout = 6

class Account:
    def __init__(self, name, password):
        self._name = name
        self._password = password
        self._status = "Available"
        self._contact = []
        self._inbox = Inbox()
        self._sentbox = Sentbox()

    @property
    def Name(self):
        return self._name

    @property
    def Password(self):
        return self._password

    @property
    def Contact(self):
        return self._contact

    def changePassword(self, newPassword):
        self._password = newPassword
        print("Password changed successfully!")

    def setStatus(self, status):
        self._status = status

    def viewStatus(self, acc):
        print(acc._status)

    def sendMessage(self, msg):
        self._sentbox._sentbox.append(msg)
        msg._toAccount._inbox._inbox.append(msg)

    def viewInbox(self):
        for msg in self._inbox._inbox:
            print(msg)

    def viewSentbox(self):
        for msg in self._sentbox._sentbox:
            print(msg)

class Sentbox:
    def __init__(self):
        self._sentbox = []

class Users:
    _users = []

    @staticmethod
    def addNewAccount(acc):
        if any(a.Name == acc.Name for a in Users._users):
            return False

        Users._users.append(acc)
        return True

    @staticmethod
    def getAccount(name, password):
        return next((a for a in Users._users if a.Name == name and a.Password == password), None)

    @staticmethod
    def getaccount(name):
        return next((a for a in Users._users if a.Name == name), None)

class Message:
    def __init__(self, message, toAcc, fromName):
        self._message = message
        self._toAccount = toAcc
        self._fromName = fromName

    def __str__(self):
        return self._message + " to " + self._toAccount.Name + " from " + self._fromName

class Inbox:
    def __init__(self):
        self._inbox = []

def ReadUserOption():
    while True:
        try:
            option = int(input("Press 1 to create a new account, Press 2 to login, Press 3 to quit: "))
            if option in range(1, 4):
                return Useroptions(option - 1)
            else:
                print("Please enter a valid number")
        except ValueError:
            print("Please enter a valid number")

def ReadloginOption():
    while True:
        try:
            option = int(input("Press 1 to send a message, Press 2 to view your inbox, Press 3 to view your sentbox, Press 4 to view status, Press 5 to change your status, Press 6 to change your password, Press 7 to logout: "))
            if option in range(1, 8):
                return Loginoptions(option - 1)
            else:
                print("Please enter a valid number")
        except ValueError:
            print("Please enter a valid number")

def Create(name, password):
    newAcc = Account(name, password)
    return Users.addNewAccount(newAcc)

def Main():
    selection = None
    while selection != Useroptions.quit:
        selection = ReadUserOption()
        print(f"The selected option is {selection}")
        if selection == Useroptions.create:
            newname = input("Please enter your name: ")
            newpass = input("Please enter your password: ")
            if Create(newname, newpass):
                print("Your account has been successfully created")
            else:
                print("Your account has not been created since the name is already taken!")
        elif selection == Useroptions.login:
            yourname = input("Please enter your name: ")
            yourpass = input("Please enter your password: ")
            logacc = Users.getAccount(yourname, yourpass)
            if logacc is not None:
                print("You have successfully logged in")
                selection_new = None
                while selection_new != Loginoptions.logout:
                    selection_new = ReadloginOption()
                    if selection_new == Loginoptions.sendmsg:
                        msg = input("Enter the message: ")
                        toname = input("Enter the recipient name: ")
                        toAcc = Users.getaccount(toname)
                        if toAcc is not None:
                            msg1 = Message(msg, toAcc, logacc.Name)
                            logacc.sendMessage(msg1)
                            print("Successfully sent the message")
                        else:
                            print("User not found. Please verify the username provided")
                    elif selection_new == Loginoptions.inbox:
                        logacc.viewInbox()
                    elif selection_new == Loginoptions.sentbox:
                        logacc.viewSentbox()
                    elif selection_new == Loginoptions.viewStatus:
                        print(logacc._status)
                    elif selection_new == Loginoptions.changeStatus:
                        new_status = input("Enter your new status: ")
                        logacc.setStatus(new_status)
                    elif selection_new == Loginoptions.changePassword:
                        new_pass = input("Enter your new password: ")
                        logacc.changePassword(new_pass)
            else:
                print("Invalid credentials!")

if __name__ == "__main__":
    Main()